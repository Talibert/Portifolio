{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taliberti\\\\Documents\\\\repositories\\\\Portifolio\\\\my-app\\\\src\\\\components\\\\Hero.js\",\n  _s = $RefreshSig$();\nimport \"../Styles/Hero.css\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Hero() {\n  _s();\n  const [text1, setintroText1] = useState(\"\");\n  const [text2, setintroText2] = useState(\"\");\n  const [text3, setintroText3] = useState(\"\");\n  const introText1 = \"<Welcome!>\";\n  const introText2 = \"{/*I'm Guilherme Taliberti*/}\";\n  const introText3 = \"//And this is my Portifolio!\";\n\n  // UseEffect configurado para rodar sempre que a página for atualizada\n  useEffect(() => {\n    // Definição da função que irá receber o texto como argumento\n    const writeText1 = (firstText, secondText, thirdText) => {\n      // Inicialização das variáveis index e newText1\n      let index = 0;\n      let newText1 = \"\";\n      let finishText1 = false;\n      let finishText2 = false;\n\n      // Função que irá escrever a palavra aos poucos\n      function updateText1() {\n        if (index < firstText.length) {\n          newText1 += firstText[index];\n          setintroText1(newText1);\n          index++;\n          // Rechamada da função que ocorre até que o texto acabe\n          setTimeout(updateText1, 100);\n          // fisishText1 vira true porque o texto foi finalizado\n          finishText1 = index === firstText.length;\n        }\n        if (finishText1) {\n          let index2 = 0;\n          let newtext2 = \"\";\n\n          // Função que irá escrever a palavra aos poucos\n          function updateText2() {\n            if (index2 < secondText.length) {\n              newtext2 += secondText[index2];\n              setintroText2(newtext2);\n              index2++;\n              console.log(finishText2);\n              // Rechamada da função que ocorre até que o texto acabe\n              setTimeout(updateText2, 100);\n              // fisishText2 vira true porque o texto foi finalizado\n              finishText2 = index2 === secondText.length;\n            }\n          }\n          // Chamada inicial da função\n          updateText2();\n        }\n        if (finishText2) {\n          console.log(\"entrou no if\");\n          let index3 = 0;\n          let newText3 = \"\";\n\n          // Função que irá escrever a palavra aos poucos\n          function updateText3() {\n            if (index3 < thirdText.length) {\n              newText3 += thirdText[index3];\n              setintroText3(newText3);\n              index3++;\n              // Rechamada da função que ocorre até que o texto acabe\n              setTimeout(updateText3, 100);\n            }\n          }\n          // Chamada inicial da função\n          updateText3();\n        }\n      }\n      // Chamada inicial da função\n      updateText1();\n    };\n    writeText1(introText1, introText2, introText3);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"texts\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"introtext1\",\n        children: text1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"introtext2\",\n        children: text2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"introtext3\",\n        children: text3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(Hero, \"YKVN7XRSPk4+jCfjyGFDk76dWXM=\");\n_c = Hero;\nvar _c;\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Hero","_s","text1","setintroText1","text2","setintroText2","text3","setintroText3","introText1","introText2","introText3","writeText1","firstText","secondText","thirdText","index","newText1","finishText1","finishText2","updateText1","length","setTimeout","index2","newtext2","updateText2","console","log","index3","newText3","updateText3","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Taliberti/Documents/repositories/Portifolio/my-app/src/components/Hero.js"],"sourcesContent":["import \"../Styles/Hero.css\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function Hero() {\r\n\r\n    const [text1, setintroText1] = useState(\"\")\r\n    const [text2, setintroText2] = useState(\"\")\r\n    const [text3, setintroText3] = useState(\"\")\r\n    \r\n    const introText1 = \"<Welcome!>\"\r\n    const introText2 = \"{/*I'm Guilherme Taliberti*/}\"\r\n    const introText3 = \"//And this is my Portifolio!\"\r\n    \r\n    // UseEffect configurado para rodar sempre que a página for atualizada\r\n    useEffect(() => {\r\n\r\n        // Definição da função que irá receber o texto como argumento\r\n        const writeText1 = (firstText, secondText, thirdText ) => {\r\n\r\n            // Inicialização das variáveis index e newText1\r\n            let index = 0;\r\n            let newText1 = \"\";\r\n            let finishText1 = false;\r\n            let finishText2 = false;\r\n        \r\n            // Função que irá escrever a palavra aos poucos\r\n            function updateText1() {\r\n                if (index < firstText.length) {\r\n                    newText1 += firstText[index]\r\n                    setintroText1(newText1);\r\n                    index++;\r\n                    // Rechamada da função que ocorre até que o texto acabe\r\n                    setTimeout(updateText1, 100);\r\n                    // fisishText1 vira true porque o texto foi finalizado\r\n                    finishText1 = index === firstText.length;\r\n                }   \r\n                    if (finishText1) {\r\n                        let index2 = 0;\r\n                        let newtext2 = \"\";\r\n                        \r\n                        // Função que irá escrever a palavra aos poucos\r\n                        function updateText2() {\r\n                            if (index2 < secondText.length) {\r\n                                newtext2 += secondText[index2]\r\n                                setintroText2(newtext2);\r\n                                index2++;\r\n                                console.log(finishText2);\r\n                                // Rechamada da função que ocorre até que o texto acabe\r\n                                setTimeout(updateText2, 100);\r\n                                // fisishText2 vira true porque o texto foi finalizado\r\n                                finishText2 = index2 === secondText.length;\r\n                            }\r\n                        }\r\n                        // Chamada inicial da função\r\n                        updateText2();\r\n                    }\r\n                        if (finishText2) {\r\n                            console.log(\"entrou no if\")\r\n                            let index3 = 0;\r\n                            let newText3 = \"\";\r\n                    \r\n                            // Função que irá escrever a palavra aos poucos\r\n                            function updateText3() {\r\n                                if (index3 < thirdText.length) {\r\n                                newText3 += thirdText[index3]\r\n                                setintroText3(newText3);\r\n                                index3++;\r\n                                // Rechamada da função que ocorre até que o texto acabe\r\n                                setTimeout(updateText3, 100);\r\n                                }\r\n                            }\r\n                            // Chamada inicial da função\r\n                            updateText3();\r\n                        }\r\n            }\r\n            // Chamada inicial da função\r\n            updateText1();\r\n        }\r\n        writeText1(introText1, introText2, introText3)\r\n    },[])\r\n\r\n    \r\n\r\n    return(\r\n\r\n        <div className=\"hero\">\r\n            <div className=\"texts\">\r\n                {/*<img className = \"profilepicture\" src=\"/assets/guilhermeprofile.jpg\" alt=\"foto do guilherme\"></img>*/}\r\n                <h1 className = \"introtext1\">{text1}</h1>\r\n                <h1 className=\"introtext2\">{text2}</h1>\r\n                <h1 className=\"introtext3\">{text3}</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA,OAAO,oBAAoB;AAC3B,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAE3B,MAAM,CAACC,KAAK,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACO,KAAK,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACS,KAAK,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE3C,MAAMW,UAAU,GAAG,YAAY;EAC/B,MAAMC,UAAU,GAAG,+BAA+B;EAClD,MAAMC,UAAU,GAAG,8BAA8B;;EAEjD;EACAd,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMe,UAAU,GAAGA,CAACC,SAAS,EAAEC,UAAU,EAAEC,SAAS,KAAM;MAEtD;MACA,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAIC,WAAW,GAAG,KAAK;MACvB,IAAIC,WAAW,GAAG,KAAK;;MAEvB;MACA,SAASC,WAAWA,CAAA,EAAG;QACnB,IAAIJ,KAAK,GAAGH,SAAS,CAACQ,MAAM,EAAE;UAC1BJ,QAAQ,IAAIJ,SAAS,CAACG,KAAK,CAAC;UAC5BZ,aAAa,CAACa,QAAQ,CAAC;UACvBD,KAAK,EAAE;UACP;UACAM,UAAU,CAACF,WAAW,EAAE,GAAG,CAAC;UAC5B;UACAF,WAAW,GAAGF,KAAK,KAAKH,SAAS,CAACQ,MAAM;QAC5C;QACI,IAAIH,WAAW,EAAE;UACb,IAAIK,MAAM,GAAG,CAAC;UACd,IAAIC,QAAQ,GAAG,EAAE;;UAEjB;UACA,SAASC,WAAWA,CAAA,EAAG;YACnB,IAAIF,MAAM,GAAGT,UAAU,CAACO,MAAM,EAAE;cAC5BG,QAAQ,IAAIV,UAAU,CAACS,MAAM,CAAC;cAC9BjB,aAAa,CAACkB,QAAQ,CAAC;cACvBD,MAAM,EAAE;cACRG,OAAO,CAACC,GAAG,CAACR,WAAW,CAAC;cACxB;cACAG,UAAU,CAACG,WAAW,EAAE,GAAG,CAAC;cAC5B;cACAN,WAAW,GAAGI,MAAM,KAAKT,UAAU,CAACO,MAAM;YAC9C;UACJ;UACA;UACAI,WAAW,CAAC,CAAC;QACjB;QACI,IAAIN,WAAW,EAAE;UACbO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAC3B,IAAIC,MAAM,GAAG,CAAC;UACd,IAAIC,QAAQ,GAAG,EAAE;;UAEjB;UACA,SAASC,WAAWA,CAAA,EAAG;YACnB,IAAIF,MAAM,GAAGb,SAAS,CAACM,MAAM,EAAE;cAC/BQ,QAAQ,IAAId,SAAS,CAACa,MAAM,CAAC;cAC7BpB,aAAa,CAACqB,QAAQ,CAAC;cACvBD,MAAM,EAAE;cACR;cACAN,UAAU,CAACQ,WAAW,EAAE,GAAG,CAAC;YAC5B;UACJ;UACA;UACAA,WAAW,CAAC,CAAC;QACjB;MACZ;MACA;MACAV,WAAW,CAAC,CAAC;IACjB,CAAC;IACDR,UAAU,CAACH,UAAU,EAAEC,UAAU,EAAEC,UAAU,CAAC;EAClD,CAAC,EAAC,EAAE,CAAC;EAIL,oBAEIX,OAAA;IAAK+B,SAAS,EAAC,MAAM;IAAAC,QAAA,eACjBhC,OAAA;MAAK+B,SAAS,EAAC,OAAO;MAAAC,QAAA,gBAElBhC,OAAA;QAAI+B,SAAS,EAAG,YAAY;QAAAC,QAAA,EAAE7B;MAAK;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzCpC,OAAA;QAAI+B,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAE3B;MAAK;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvCpC,OAAA;QAAI+B,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEzB;MAAK;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAClC,EAAA,CA3FuBD,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}