{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taliberti\\\\Documents\\\\repositories\\\\Portifolio\\\\my-app\\\\src\\\\components\\\\hero.js\",\n  _s = $RefreshSig$();\nimport \"../Styles/Hero.css\";\nimport { useEffect, useState } from \"react\";\nimport StackSection from \"./StackSection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Hero() {\n  _s();\n  // Declaração das variáveis do useState\n  const [text1, setintroText1] = useState(\" \");\n  const [text2, setintroText2] = useState(\" \");\n  const [text3, setintroText3] = useState(\" \");\n\n  //Declaração dos textos que serão escritos\n  const introText1 = \"<Welcome!>\";\n  const introText2 = \"{/*I'm Guilherme Taliberti*/}\";\n  const introText3 = \"//And this is my Portifolio!\";\n\n  // UseEffect configurado para rodar sempre que a página for atualizada\n  useEffect(() => {\n    // Definição da função que irá receber os textos como argumento\n    const writeText = (firstText, secondText, thirdText) => {\n      // Variáveis que irão controlar a posição das três strings\n      let index = 0;\n      let index2 = 0;\n      let index3 = 0;\n      // Strings que irão receber os textos atualizados\n      let newText1 = \"\";\n      let newtext2 = \"\";\n      let newText3 = \"\";\n      // Variáveis que controlarão quando os textos terminarem\n      let finishText1 = false;\n      let finishText2 = false;\n\n      // Função que irá escrever a palavra aos poucos\n      function updateText1() {\n        if (index < firstText.length) {\n          newText1 += firstText[index];\n          setintroText1(newText1);\n          index++;\n          // Rechamada da função que ocorre até que o texto acabe\n          setTimeout(updateText1, 50);\n          // fisishText1 vira true porque o texto foi finalizado\n          finishText1 = index === firstText.length;\n\n          // Verifica se o primeiro texto foi escrito\n          if (finishText1) {\n            // Função que irá escrever a palavra aos poucos\n            function updateText2() {\n              if (index2 < secondText.length) {\n                newtext2 += secondText[index2];\n                setintroText2(newtext2);\n                index2++;\n                // Rechamada da função que ocorre até que o texto acabe\n                setTimeout(updateText2, 50);\n                // fisishText2 vira true porque o texto foi finalizado\n                finishText2 = index2 === secondText.length;\n\n                // Verifica se o segundo texto foi escrito\n                if (finishText2) {\n                  // Função que irá escrever a palavra aos poucos\n                  function updateText3() {\n                    if (index3 < thirdText.length) {\n                      newText3 += thirdText[index3];\n                      setintroText3(newText3);\n                      index3++;\n                      // Rechamada da função que ocorre até que o texto acabe\n                      setTimeout(updateText3, 50);\n                    }\n                  }\n                  // Chamada inicial da função 3\n                  updateText3();\n                }\n              }\n            }\n            // Chamada inicial da função 2\n            updateText2();\n          }\n        }\n      }\n      // Chamada inicial da função 1\n      updateText1();\n    };\n    writeText(introText1, introText2, introText3);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"texts\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"introtext1\",\n          children: text1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"introtext2\",\n          children: text2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"introtext3\",\n          children: text3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StackSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(Hero, \"dB0C0oYgx02NWvdvWFStMAsUGKM=\");\n_c = Hero;\nvar _c;\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"names":["useEffect","useState","StackSection","jsxDEV","_jsxDEV","Hero","_s","text1","setintroText1","text2","setintroText2","text3","setintroText3","introText1","introText2","introText3","writeText","firstText","secondText","thirdText","index","index2","index3","newText1","newtext2","newText3","finishText1","finishText2","updateText1","length","setTimeout","updateText2","updateText3","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Taliberti/Documents/repositories/Portifolio/my-app/src/components/hero.js"],"sourcesContent":["import \"../Styles/Hero.css\"\r\nimport { useEffect, useState } from \"react\"\r\nimport StackSection from \"./StackSection\"\r\n\r\nexport default function Hero() {\r\n    \r\n    // Declaração das variáveis do useState\r\n    const [text1, setintroText1] = useState(\" \")\r\n    const [text2, setintroText2] = useState(\" \")\r\n    const [text3, setintroText3] = useState(\" \")\r\n    \r\n    //Declaração dos textos que serão escritos\r\n    const introText1 = \"<Welcome!>\"\r\n    const introText2 = \"{/*I'm Guilherme Taliberti*/}\"\r\n    const introText3 = \"//And this is my Portifolio!\"\r\n    \r\n    // UseEffect configurado para rodar sempre que a página for atualizada\r\n    useEffect(() => {\r\n\r\n        // Definição da função que irá receber os textos como argumento\r\n        const writeText = (firstText, secondText, thirdText ) => {\r\n            // Variáveis que irão controlar a posição das três strings\r\n            let index = 0;\r\n            let index2 = 0;\r\n            let index3 = 0;\r\n            // Strings que irão receber os textos atualizados\r\n            let newText1 = \"\";\r\n            let newtext2 = \"\";\r\n            let newText3 = \"\";\r\n            // Variáveis que controlarão quando os textos terminarem\r\n            let finishText1 = false;\r\n            let finishText2 = false;\r\n\r\n            // Função que irá escrever a palavra aos poucos\r\n            function updateText1() {\r\n                if (index < firstText.length) {\r\n                    newText1 += firstText[index]\r\n                    setintroText1(newText1);\r\n                    index++;\r\n                    // Rechamada da função que ocorre até que o texto acabe\r\n                    setTimeout(updateText1, 50);\r\n                    // fisishText1 vira true porque o texto foi finalizado\r\n                    finishText1 = index === firstText.length; \r\n\r\n                        // Verifica se o primeiro texto foi escrito\r\n                        if (finishText1) {\r\n                            // Função que irá escrever a palavra aos poucos\r\n                            function updateText2() {\r\n                            if (index2 < secondText.length) {\r\n                                newtext2 += secondText[index2]\r\n                                setintroText2(newtext2);\r\n                                index2++;\r\n                                // Rechamada da função que ocorre até que o texto acabe\r\n                                setTimeout(updateText2, 50);\r\n                                // fisishText2 vira true porque o texto foi finalizado\r\n                                finishText2 = index2 === secondText.length;\r\n\r\n                                    // Verifica se o segundo texto foi escrito\r\n                                    if(finishText2) {\r\n                                        // Função que irá escrever a palavra aos poucos\r\n                                        function updateText3() {\r\n                                            if (index3 < thirdText.length) {\r\n                                            newText3 += thirdText[index3]\r\n                                            setintroText3(newText3);\r\n                                            index3++;\r\n                                            // Rechamada da função que ocorre até que o texto acabe\r\n                                            setTimeout(updateText3, 50);\r\n                                            }\r\n                                        }\r\n                                        // Chamada inicial da função 3\r\n                                        updateText3();\r\n                                    }\r\n                            }\r\n                            }\r\n                            // Chamada inicial da função 2\r\n                            updateText2();\r\n                        }\r\n                }\r\n            }\r\n            // Chamada inicial da função 1\r\n            updateText1();\r\n        }\r\n        writeText(introText1, introText2, introText3)\r\n    },[])\r\n    \r\n\r\n    return(\r\n\r\n        <div className=\"hero\">\r\n            <div className=\"profile\">\r\n                <div className=\"texts\">\r\n                    <h1 className=\"introtext1\">{text1}</h1>\r\n                    <h1 className=\"introtext2\">{text2}</h1>\r\n                    <h1 className=\"introtext3\">{text3}</h1>\r\n                </div>\r\n                <img>\r\n                </img>\r\n            </div>\r\n            <StackSection/>\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}