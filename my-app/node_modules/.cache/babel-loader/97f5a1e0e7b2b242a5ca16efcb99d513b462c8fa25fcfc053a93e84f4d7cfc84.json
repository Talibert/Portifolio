{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GUILHERME\\\\documents\\\\repositories\\\\Portifolio\\\\my-app\\\\src\\\\components\\\\navbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../Styles/navbar.css\";\nimport Hero from \"./hero\";\nimport 'animate.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Navbar() {\n  _s();\n  // Variável para alterar a classe do Menu Hamburguer\n  const [burger_class, setBurgerClass] = useState(\"burger-bar unclicked\");\n  // Variável para alterar a variável do Menu que o Menu Hamburguer abre\n  const [menu_class, setMenuClass] = useState(\"menu hidden\");\n  // Variável que define se o menu está clicado ou não\n  const [isMenuClicked, setIsMenuClicked] = useState(false);\n  // Variável que define se a barra superior será exibida ou não\n  const [isVisible, setIsVisible] = useState(true);\n  // Variável que irá armazenar a posição anterior do scroll\n  const scrollPosRef = useRef(0);\n\n  // Função chamada quando o usuário clica no Menu Hamburguer\n  const updateMenu = () => {\n    // Se o Menu for clicado, o Menu Hamburguer e o menu recebem as classes de visivel e clicado\n    if (!isMenuClicked) {\n      setBurgerClass(\"burger-bar clicked\");\n      setMenuClass(\"menu visible\");\n    }\n    // Se o Menu não for clicado, o Menu Hamburguer e o menu recebem as classes de invisivel e não clicado\n    else {\n      setBurgerClass(\"burger-bar unclicked\");\n      setMenuClass(\"menu hidden\");\n    }\n    // A variavel que define se o Menu Hamburguer foi clicado é invertida\n    setIsMenuClicked(!isMenuClicked);\n  };\n\n  // Função chamada sempre que há rolagem no scroll\n  useEffect(() => {\n    // Função para definir a visibilidade\n    const handleScroll = () => {\n      // Variável que irá receber a posição atual do cursor\n      const currentScrollPos = typeof window !== 'undefined' && window.scrollY;\n\n      // Altera o estado de isVisible dependendo da rolagem do cursor. Se a condição dentro dos parâmetros de setIsVisible for true, a barra é exibida. Caso contrário, ela é escondida.\n      setIsVisible(currentScrollPos <= 0 || currentScrollPos < scrollPosRef.current);\n      // Após definir a visibilidade, scrollPosRef recebe o currentScrollPos \"antigo\", atualizando seu valor para uma próxima verificação\n      scrollPosRef.current = currentScrollPos;\n    };\n\n    // EventListener que chama handleScroll caso haja mudança no scroll\n    window.addEventListener('scroll', handleScroll);\n\n    // Realiza a limpeza quando o componente for desmontado. É uma boa prática para manter a eficiência\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  // Variável que irá armazenar as configurações de CSS para animação da nav sumindo e aparecendo\n  const transitionStyle = {\n    // Opacidade de 1 a 0 conforme a visibilidade\n    opacity: isVisible ? 1 : 0,\n    // Height do valor original até zero conforme a visibilidade\n    height: isVisible ? '4em' : 0,\n    // Garante que o conteúdo não seja exibido\n    overflow: 'hidden',\n    // Velocidade de transição para as propriedades opacity e height\n    transition: 'opacity 0.5s ease, height 0.5s ease' // Adicione as propriedades de transição aqui\n  };\n  const transitionStyleMenu = {\n    // Opacidade de 1 a 0 conforme a visibilidade\n    opacity: isVisible ? 0.8 : 0,\n    width: isVisible ? \"10em\" : 0,\n    // Garante que o conteúdo não seja exibido\n    overflow: 'hidden',\n    // Velocidade de transição para as propriedades opacity e height\n    transition: 'opacity 0.5s ease, width 0.5s ease' // Adicione as propriedades de transição aqui\n  };\n  return (\n    /*#__PURE__*/\n    // div principal\n    _jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        style: transitionStyle,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"burger-menu\",\n          onClick: updateMenu,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: burger_class\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: burger_class\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: burger_class\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: transitionStyleMenu,\n        className: isVisible ? menu_class : \"menu hidden\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"teste\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(Navbar, \"SgmqOEtAuOBbm/6wkreFzcggZJc=\");\n_c = Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Hero","jsxDEV","_jsxDEV","Navbar","_s","burger_class","setBurgerClass","menu_class","setMenuClass","isMenuClicked","setIsMenuClicked","isVisible","setIsVisible","scrollPosRef","updateMenu","handleScroll","currentScrollPos","window","scrollY","current","addEventListener","removeEventListener","transitionStyle","opacity","height","overflow","transition","transitionStyleMenu","width","style","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/GUILHERME/documents/repositories/Portifolio/my-app/src/components/navbar.js"],"sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\nimport \"../Styles/navbar.css\"\r\nimport Hero from \"./hero\"\r\nimport 'animate.css'\r\n\r\nexport default function Navbar(){\r\n\r\n    // Variável para alterar a classe do Menu Hamburguer\r\n    const [burger_class, setBurgerClass] = useState(\"burger-bar unclicked\")\r\n    // Variável para alterar a variável do Menu que o Menu Hamburguer abre\r\n    const [menu_class, setMenuClass] = useState(\"menu hidden\")\r\n    // Variável que define se o menu está clicado ou não\r\n    const [isMenuClicked, setIsMenuClicked] = useState(false)\r\n    // Variável que define se a barra superior será exibida ou não\r\n    const [isVisible, setIsVisible] = useState(true);\r\n    // Variável que irá armazenar a posição anterior do scroll\r\n    const scrollPosRef = useRef(0);\r\n\r\n    // Função chamada quando o usuário clica no Menu Hamburguer\r\n    const updateMenu = () => {\r\n        // Se o Menu for clicado, o Menu Hamburguer e o menu recebem as classes de visivel e clicado\r\n        if(!isMenuClicked) {\r\n            setBurgerClass(\"burger-bar clicked\")\r\n            setMenuClass(\"menu visible\")\r\n        }\r\n        // Se o Menu não for clicado, o Menu Hamburguer e o menu recebem as classes de invisivel e não clicado\r\n        else {\r\n            setBurgerClass(\"burger-bar unclicked\")\r\n            setMenuClass(\"menu hidden\")\r\n        }\r\n        // A variavel que define se o Menu Hamburguer foi clicado é invertida\r\n        setIsMenuClicked(!isMenuClicked)\r\n    }\r\n\r\n    // Função chamada sempre que há rolagem no scroll\r\n    useEffect(() => {\r\n        // Função para definir a visibilidade\r\n        const handleScroll = () => {\r\n            // Variável que irá receber a posição atual do cursor\r\n            const currentScrollPos = typeof window !== 'undefined' && window.scrollY;\r\n        \r\n            // Altera o estado de isVisible dependendo da rolagem do cursor. Se a condição dentro dos parâmetros de setIsVisible for true, a barra é exibida. Caso contrário, ela é escondida.\r\n            setIsVisible(currentScrollPos <= 0 || currentScrollPos < scrollPosRef.current);\r\n            // Após definir a visibilidade, scrollPosRef recebe o currentScrollPos \"antigo\", atualizando seu valor para uma próxima verificação\r\n            scrollPosRef.current = currentScrollPos;\r\n        };\r\n    \r\n        // EventListener que chama handleScroll caso haja mudança no scroll\r\n        window.addEventListener('scroll', handleScroll);\r\n    \r\n        // Realiza a limpeza quando o componente for desmontado. É uma boa prática para manter a eficiência\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n      // Variável que irá armazenar as configurações de CSS para animação da nav sumindo e aparecendo\r\n    const transitionStyle = {\r\n        // Opacidade de 1 a 0 conforme a visibilidade\r\n        opacity: isVisible ? 1 : 0,\r\n        // Height do valor original até zero conforme a visibilidade\r\n        height: isVisible ? '4em' : 0,\r\n        // Garante que o conteúdo não seja exibido\r\n        overflow: 'hidden',\r\n        // Velocidade de transição para as propriedades opacity e height\r\n        transition: 'opacity 0.5s ease, height 0.5s ease', // Adicione as propriedades de transição aqui\r\n    };\r\n\r\n    const transitionStyleMenu = {\r\n        // Opacidade de 1 a 0 conforme a visibilidade\r\n        opacity: isVisible ? 0.8 : 0,\r\n        width: isVisible ? \"10em\" : 0,\r\n        // Garante que o conteúdo não seja exibido\r\n        overflow: 'hidden',\r\n        // Velocidade de transição para as propriedades opacity e height\r\n        transition: 'opacity 0.5s ease, width 0.5s ease', // Adicione as propriedades de transição aqui\r\n    };\r\n\r\n    return(\r\n        // div principal\r\n        <div style={{width: '100%', height: '100vh'}}>\r\n            {/*barra superior*/}\r\n            <nav style={transitionStyle} >\r\n                {/*div menu de hamburguer*/}\r\n                <div className=\"burger-menu\" onClick={updateMenu}>\r\n                    {/*as tres divs abaixo representam os tres riscos do menu */}\r\n                    <div className={burger_class} ></div>\r\n                    <div className={burger_class} ></div>\r\n                    <div className={burger_class} ></div>\r\n                </div>\r\n            </nav>\r\n\r\n            {/*menu que é aberto quando clicamos no menu hamburguer*/}\r\n            <div style={transitionStyleMenu} className={isVisible? menu_class : \"menu hidden\"}\r\n            >   \r\n                <p>teste</p>\r\n            </div>\r\n            <Hero/>\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}